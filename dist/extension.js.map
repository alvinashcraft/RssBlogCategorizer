{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/ignoreAttributes.js","webpack://rss-blog-categorizer/./src/exportManager.ts","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/util.js","webpack://rss-blog-categorizer/external commonjs \"vscode\"","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/fxp.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack://rss-blog-categorizer/external node-commonjs \"https\"","webpack://rss-blog-categorizer/./src/rssProvider.ts","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack://rss-blog-categorizer/external node-commonjs \"fs\"","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/validator.js","webpack://rss-blog-categorizer/./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack://rss-blog-categorizer/external node-commonjs \"path\"","webpack://rss-blog-categorizer/./node_modules/strnum/strnum.js","webpack://rss-blog-categorizer/webpack/bootstrap","webpack://rss-blog-categorizer/./src/extension.ts"],"sourcesContent":["function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","import * as vscode from 'vscode';\r\nimport * as https from 'https';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { BlogPost } from './rssProvider';\r\n\r\nexport class ExportManager {\r\n    \r\n    async exportAsMarkdown(posts: BlogPost[]): Promise<void> {\r\n        const content = await this.generateMarkdownContent(posts);\r\n        await this.saveExport(content, 'markdown', 'md');\r\n    }\r\n\r\n    async exportAsHtml(posts: BlogPost[]): Promise<void> {\r\n        const content = await this.generateHtmlContent(posts);\r\n        await this.saveExport(content, 'html', 'html');\r\n    }\r\n\r\n    private async generateDewDropTitle(): Promise<string> {\r\n        console.log('Generating Dew Drop title based on latest post...');\r\n        \r\n        try {\r\n            // Get the latest Dew Drop post number (this method has its own error handling)\r\n            const latestPostNumber = await this.getLatestDewDropNumber();\r\n            const nextPostNumber = latestPostNumber + 1;\r\n            \r\n            // Format today's date\r\n            const today = new Date();\r\n            const monthNames = [\r\n                'January', 'February', 'March', 'April', 'May', 'June',\r\n                'July', 'August', 'September', 'October', 'November', 'December'\r\n            ];\r\n            const month = monthNames[today.getMonth()];\r\n            const day = today.getDate();\r\n            const year = today.getFullYear();\r\n            \r\n            const title = `Dew Drop - ${month} ${day}, ${year} (#${nextPostNumber})`;\r\n            console.log(`Generated Dew Drop title: \"${title}\"`);\r\n            \r\n            // Show a notification to confirm the title generation worked\r\n            vscode.window.showInformationMessage(`Generated title: ${title}`);\r\n            \r\n            return title;\r\n            \r\n        } catch (error) {\r\n            console.error('Unexpected error in generateDewDropTitle:', error);\r\n            // Even if there's an error, still generate a Dew Drop title with fallback number\r\n            const today = new Date();\r\n            const monthNames = [\r\n                'January', 'February', 'March', 'April', 'May', 'June',\r\n                'July', 'August', 'September', 'October', 'November', 'December'\r\n            ];\r\n            const month = monthNames[today.getMonth()];\r\n            const day = today.getDate();\r\n            const year = today.getFullYear();\r\n            \r\n            const fallbackTitle = `Dew Drop - ${month} ${day}, ${year} (#4507)`;\r\n            console.log(`Using fallback Dew Drop title: \"${fallbackTitle}\"`);\r\n            vscode.window.showWarningMessage(`Using fallback title: ${fallbackTitle}`);\r\n            return fallbackTitle;\r\n        }\r\n    }\r\n\r\n    private async getLatestDewDropNumber(): Promise<number> {\r\n        try {\r\n            console.log('Fetching RSS feed from alvinashcraft.com...');\r\n            vscode.window.showInformationMessage('Fetching latest Dew Drop post number...');\r\n            \r\n            // Fetch the RSS feed from alvinashcraft.com\r\n            const rssData = await this.fetchRssFeed('https://www.alvinashcraft.com/feed/');\r\n            console.log(`RSS feed fetched, length: ${rssData.length} characters`);\r\n            \r\n            // Parse and find Dew Drop posts\r\n            const parser = new XMLParser({ \r\n                ignoreAttributes: false, \r\n                attributeNamePrefix: '@_',\r\n                parseAttributeValue: true,\r\n                trimValues: true\r\n            });\r\n            const result = parser.parse(rssData);\r\n            const items = result.rss?.channel?.item || [];\r\n            console.log(`Found ${items.length} items in RSS feed`);\r\n            \r\n            // Look for the latest Dew Drop post and extract the number\r\n            for (let i = 0; i < Math.min(items.length, 10); i++) { // Check first 10 items\r\n                const item = items[i];\r\n                let title = item.title || '';\r\n                \r\n                // Decode HTML entities\r\n                title = title\r\n                    .replace(/&#8211;/g, '–')\r\n                    .replace(/&#8212;/g, '—')\r\n                    .replace(/&ndash;/g, '–')\r\n                    .replace(/&mdash;/g, '—')\r\n                    .replace(/&amp;/g, '&')\r\n                    .replace(/&lt;/g, '<')\r\n                    .replace(/&gt;/g, '>')\r\n                    .replace(/&quot;/g, '\"')\r\n                    .replace(/&#39;/g, \"'\");\r\n                \r\n                console.log(`Checking post ${i + 1}: \"${title}\"`);\r\n                \r\n                // Match pattern like \"Dew Drop – September 26, 2025 (#4506)\" or similar variations\r\n                const match = title.match(/#(\\d+)\\)/);\r\n                if (match && title.toLowerCase().includes('dew drop')) {\r\n                    const postNumber = parseInt(match[1], 10);\r\n                    console.log(`✓ Latest Dew Drop post found: \"${title}\" (number: ${postNumber})`);\r\n                    vscode.window.showInformationMessage(`Found latest Dew Drop: #${postNumber}`);\r\n                    return postNumber;\r\n                }\r\n            }\r\n            \r\n            console.warn('No Dew Drop posts with numbers found in first 10 items, using fallback number 4506');\r\n            vscode.window.showWarningMessage('No Dew Drop posts found, using fallback #4506');\r\n            return 4506; // Fallback - change this number as needed\r\n            \r\n        } catch (error) {\r\n            console.error('Error fetching latest Dew Drop number:', error);\r\n            vscode.window.showErrorMessage(`Failed to fetch Dew Drop number: ${error}`);\r\n            console.log('Using fallback number 4506');\r\n            return 4506; // Fallback - change this number as needed\r\n        }\r\n    }\r\n\r\n    private async fetchRssFeed(url: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(`Fetching RSS from: ${url}`);\r\n            const options = {\r\n                timeout: 10000, // 10 second timeout\r\n                headers: {\r\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n                }\r\n            };\r\n\r\n            const request = https.get(url, options, (response) => {\r\n                console.log(`HTTP response status: ${response.statusCode}`);\r\n                \r\n                if (response.statusCode !== 200) {\r\n                    reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));\r\n                    return;\r\n                }\r\n\r\n                let data = '';\r\n                response.on('data', (chunk) => { data += chunk; });\r\n                response.on('end', () => {\r\n                    console.log('RSS feed download completed');\r\n                    resolve(data);\r\n                });\r\n            });\r\n\r\n            request.on('error', (error) => {\r\n                console.error('RSS fetch error:', error);\r\n                reject(error);\r\n            });\r\n\r\n            request.on('timeout', () => {\r\n                request.destroy();\r\n                reject(new Error('Request timeout'));\r\n            });\r\n        });\r\n    }\r\n\r\n    private async generateMarkdownContent(posts: BlogPost[]): Promise<string> {\r\n        const groupedPosts = await this.groupPostsByCategory(posts);\r\n        const dewDropTitle = await this.generateDewDropTitle();\r\n        \r\n        let content = `# ${dewDropTitle}\\n\\n`;\r\n\r\n        Object.entries(groupedPosts).forEach(([category, categoryPosts]: [string, BlogPost[]]) => {\r\n            content += `### ${category}\\n\\n`;\r\n            \r\n            if (category === \"Top Links\") {\r\n                // Add placeholder comment for manual editing\r\n                content += `<!-- Add top links here manually -->\\n\\n`;\r\n            } else {\r\n                categoryPosts.forEach(post => {\r\n                    content += `- [${post.title}](${post.link}) (${post.author})\\n`;\r\n                });\r\n                content += `\\n`;\r\n            }\r\n        });\r\n\r\n        // Add Geek Shelf section\r\n        const geekShelfMarkdown = await this.generateGeekShelfMarkdown();\r\n        content += geekShelfMarkdown;\r\n\r\n        return content;\r\n    }\r\n\r\n    private async generateHtmlContent(posts: BlogPost[]): Promise<string> {\r\n        const groupedPosts = await this.groupPostsByCategory(posts);\r\n        const dewDropTitle = await this.generateDewDropTitle();\r\n        \r\n        const htmlStart = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>${this.escapeHtml(dewDropTitle)}</title>\r\n</head>\r\n<body>\r\n    <div>\r\n        <h1>${this.escapeHtml(dewDropTitle)}</h1>\r\n    </div>`;\r\n\r\n        let categoriesHtml = '';\r\n        Object.entries(groupedPosts).forEach(([category, categoryPosts]: [string, BlogPost[]]) => {\r\n            categoriesHtml += `\\n    <div>\\n        <h3>${category}</h3>\\n`;\r\n            \r\n            if (category === \"Top Links\") {\r\n                // Add empty div for manual editing\r\n                categoriesHtml += `        <!-- Add top links here manually -->\\n        <div></div>\\n`;\r\n            } else {\r\n                categoriesHtml += `        <ul>\\n`;\r\n                categoryPosts.forEach(post => {\r\n                    categoriesHtml += `            <li><a href=\"${post.link}\" target=\"_blank\">${this.escapeHtml(post.title)}</a> (${this.escapeHtml(post.author)})</li>\\n`;\r\n                });\r\n                categoriesHtml += `        </ul>\\n`;\r\n            }\r\n            \r\n            categoriesHtml += `    </div>\\n`;\r\n        });\r\n\r\n        // Add Geek Shelf section\r\n        const geekShelfHtml = await this.generateGeekShelfHtml();\r\n        \r\n        const htmlEnd = `</body>\\n</html>`;\r\n        \r\n        return htmlStart + categoriesHtml + geekShelfHtml + htmlEnd;\r\n    }\r\n\r\n    private async groupPostsByCategory(posts: BlogPost[]): Promise<Record<string, BlogPost[]>> {\r\n        // Load categories config to get the correct order\r\n        const categoriesConfig = await this.loadCategoriesConfig();\r\n        const categoryOrder = categoriesConfig ? Object.keys(categoriesConfig.categories) : [];\r\n        \r\n        const grouped: Record<string, BlogPost[]> = {};\r\n        const seenLinks = new Set<string>(); // Deduplicate by link\r\n        \r\n        // Always add \"Top Links\" as the first category (empty)\r\n        grouped[\"Top Links\"] = [];\r\n        \r\n        posts.forEach(post => {\r\n            // Skip duplicates based on link\r\n            if (seenLinks.has(post.link)) {\r\n                console.log(`Export: Skipping duplicate post: ${post.title}`);\r\n                return;\r\n            }\r\n            seenLinks.add(post.link);\r\n            \r\n            if (!grouped[post.category]) {\r\n                grouped[post.category] = [];\r\n            }\r\n            grouped[post.category].push(post);\r\n        });\r\n\r\n        // Sort posts within each category by date (newest first)\r\n        Object.values(grouped).forEach(categoryPosts => {\r\n            categoryPosts.sort((a, b) => new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime());\r\n        });\r\n\r\n        // Create ordered result with \"Top Links\" first, then categories in JSON order\r\n        const orderedResult: Record<string, BlogPost[]> = {};\r\n        \r\n        // Always put \"Top Links\" first\r\n        orderedResult[\"Top Links\"] = grouped[\"Top Links\"];\r\n        \r\n        // Add categories in the order they appear in the JSON file\r\n        categoryOrder.forEach(categoryName => {\r\n            if (grouped[categoryName] && grouped[categoryName].length > 0) {\r\n                orderedResult[categoryName] = grouped[categoryName];\r\n            }\r\n        });\r\n        \r\n        // Add any remaining categories not in the JSON (like \"General\" or others)\r\n        Object.keys(grouped).forEach(categoryName => {\r\n            if (categoryName !== \"Top Links\" && !orderedResult[categoryName] && grouped[categoryName].length > 0) {\r\n                orderedResult[categoryName] = grouped[categoryName];\r\n            }\r\n        });\r\n\r\n        return orderedResult;\r\n    }\r\n\r\n    private async loadCategoriesConfig(): Promise<any> {\r\n        try {\r\n            // Try to load from extension context first (packaged extension)\r\n            let categoriesPath;\r\n            try {\r\n                categoriesPath = vscode.Uri.joinPath(vscode.extensions.getExtension('publisher.rss-blog-categorizer')!.extensionUri, 'categories.json').fsPath;\r\n            } catch {\r\n                // Fallback for development/testing\r\n                categoriesPath = path.join(__dirname, '..', 'categories.json');\r\n            }\r\n            \r\n            const categoriesData = fs.readFileSync(categoriesPath, 'utf8');\r\n            return JSON.parse(categoriesData);\r\n        } catch (error) {\r\n            console.error('Failed to load categories config for ordering:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private async saveExport(content: string, format: string, extension: string): Promise<void> {\r\n        const dewDropTitle = await this.generateDewDropTitle();\r\n        const filename = `${dewDropTitle.replace(/[<>:\"/\\\\|?*]/g, '-')}.${extension}`;\r\n        \r\n        let defaultUri;\r\n        if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {\r\n            defaultUri = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, filename);\r\n        }\r\n        \r\n        const uri = await vscode.window.showSaveDialog({\r\n            defaultUri: defaultUri,\r\n            filters: {\r\n                [format.toUpperCase()]: [extension]\r\n            }\r\n        });\r\n\r\n        if (uri) {\r\n            try {\r\n                await vscode.workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));\r\n                vscode.window.showInformationMessage(`Blog posts exported successfully to ${format.toUpperCase()} format!`);\r\n                \r\n                // Open the exported file\r\n                const doc = await vscode.workspace.openTextDocument(uri);\r\n                await vscode.window.showTextDocument(doc);\r\n            } catch (error) {\r\n                vscode.window.showErrorMessage(`Failed to export blog posts: ${error}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async generateGeekShelfHtml(): Promise<string> {\r\n        const book = await this.getBookOfTheDay();\r\n        if (!book) {\r\n            return '';\r\n        }\r\n\r\n        return `\r\n    <div>\r\n        <h3>The Geek Shelf</h3>\r\n        <div style=\"display: flex; align-items: flex-start; gap: 15px;\">\r\n            <img src=\"${book.imageUrl}\" alt=\"${this.escapeHtml(book.title)}\" style=\"width: 100px; height: auto;\">\r\n            <div>\r\n                <a href=\"${book.productUrl}\" target=\"_blank\">${this.escapeHtml(book.title)}</a> (${this.escapeHtml(book.author)}) <em>- Referral Link</em>\r\n                <p>${this.escapeHtml(book.description)}</p>\r\n            </div>\r\n        </div>\r\n    </div>`;\r\n    }\r\n\r\n    private async generateGeekShelfMarkdown(): Promise<string> {\r\n        const book = await this.getBookOfTheDay();\r\n        if (!book) {\r\n            return '';\r\n        }\r\n\r\n        return `### The Geek Shelf\r\n\r\n[![${book.title}](${book.imageUrl})](${book.productUrl})\r\n\r\n[${book.title}](${book.productUrl}) (${book.author}) *- Referral Link*\r\n\r\n${book.description}\r\n\r\n`;\r\n    }\r\n\r\n    private async getBookOfTheDay(): Promise<any> {\r\n        try {\r\n            const books = await this.loadBooksConfig();\r\n            if (!books || !books.books || books.books.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Use current date to select a book (rotates daily)\r\n            const today = new Date();\r\n            const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\r\n            const bookIndex = dayOfYear % books.books.length;\r\n            \r\n            return books.books[bookIndex];\r\n        } catch (error) {\r\n            console.error('Error getting book of the day:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private async loadBooksConfig(): Promise<any> {\r\n        try {\r\n            // Try to load from extension context first (packaged extension)\r\n            let booksPath;\r\n            try {\r\n                booksPath = vscode.Uri.joinPath(vscode.extensions.getExtension('publisher.rss-blog-categorizer')!.extensionUri, 'books.json').fsPath;\r\n            } catch {\r\n                // Fallback for development/testing\r\n                booksPath = path.join(__dirname, '..', 'books.json');\r\n            }\r\n            \r\n            const booksData = fs.readFileSync(booksPath, 'utf8');\r\n            return JSON.parse(booksData);\r\n        } catch (error) {\r\n            console.error('Failed to load books config:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private escapeHtml(text: string): string {\r\n        return text\r\n            .replace(/&/g, '&amp;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\"/g, '&quot;')\r\n            .replace(/'/g, '&#39;');\r\n    }\r\n}\r\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","module.exports = require(\"vscode\");","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","module.exports = require(\"https\");","import * as vscode from 'vscode';\r\nimport * as https from 'https';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\nexport interface BlogPost {\r\n    title: string;\r\n    link: string;\r\n    description: string;\r\n    pubDate: string;\r\n    category: string;\r\n    source: string;\r\n    author: string;\r\n}\r\n\r\nexport interface CategoryNode {\r\n    label: string;\r\n    posts: BlogPost[];\r\n    collapsibleState: vscode.TreeItemCollapsibleState;\r\n}\r\n\r\ninterface CategoriesConfig {\r\n    categories: Record<string, string[]>;\r\n    defaultCategory: string;\r\n}\r\n\r\nexport class RSSBlogProvider implements vscode.TreeDataProvider<any> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<any | undefined | null | void> = new vscode.EventEmitter<any | undefined | null | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<any | undefined | null | void> = this._onDidChangeTreeData.event;\r\n\r\n    private posts: BlogPost[] = [];\r\n    private categories: Map<string, BlogPost[]> = new Map();\r\n    private categoriesConfig: CategoriesConfig | null = null;\r\n\r\n    constructor(private context: vscode.ExtensionContext) {}\r\n\r\n    private async getLastDewDropDate(): Promise<Date | null> {\r\n        try {\r\n            console.log('Fetching latest Dew Drop post date from Alvin\\'s blog...');\r\n            const posts = await this.fetchFeed('https://www.alvinashcraft.com/feed/');\r\n            \r\n            if (posts.length === 0) {\r\n                console.log('No posts found in blog RSS feed');\r\n                return null;\r\n            }\r\n            \r\n            // Find the most recent post with title starting with \"Dew D\"\r\n            // Handle HTML entities in titles (like &#8211; for em-dash)\r\n            const dewDropPosts = posts.filter(post => {\r\n                const cleanTitle = post.title.toLowerCase()\r\n                    .replace(/&#8211;/g, '-')  // em-dash\r\n                    .replace(/&#8212;/g, '-')  // em-dash variant\r\n                    .replace(/&[a-z]+;/g, '')  // other HTML entities\r\n                    .trim();\r\n                return cleanTitle.startsWith('dew d');\r\n            });\r\n            \r\n            if (dewDropPosts.length === 0) {\r\n                console.log('No Dew Drop posts found in blog RSS feed (searched in first 20 posts)');\r\n                console.log('Available post titles:', posts.slice(0, 5).map(p => `\"${p.title}\"`).join(', '));\r\n                return null;\r\n            }\r\n\r\n            // Posts should already be sorted by date (newest first) from RSS feed\r\n            // But let's sort them to be sure\r\n            dewDropPosts.sort((a, b) => new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime());\r\n            \r\n            const latestDewDrop = dewDropPosts[0];\r\n            const latestDate = new Date(latestDewDrop.pubDate);\r\n            \r\n            if (isNaN(latestDate.getTime())) {\r\n                console.log('Invalid date found in latest Dew Drop post');\r\n                return null;\r\n            }\r\n\r\n            console.log(`✅ Latest Dew Drop post found: \"${latestDewDrop.title}\" from ${latestDate.toISOString()}`);\r\n            return latestDate;\r\n        } catch (error) {\r\n            console.error('❌ Error fetching latest Dew Drop date:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private async loadCategoriesConfig(): Promise<void> {\r\n        try {\r\n            // Use extension context to get the correct path to categories.json\r\n            const categoriesPath = path.join(this.context.extensionPath, 'categories.json');\r\n            console.log(`Loading categories from: ${categoriesPath}`);\r\n            const categoriesData = await fs.promises.readFile(categoriesPath, 'utf8');\r\n            this.categoriesConfig = JSON.parse(categoriesData) as CategoriesConfig;\r\n            console.log(`✅ Categories configuration loaded successfully with ${Object.keys(this.categoriesConfig.categories).length} categories`);\r\n        } catch (error) {\r\n            console.error('❌ Error loading categories configuration:', error);\r\n            console.error('This likely means categories.json is missing from the extension package');\r\n            // Fallback to empty config if file can't be loaded\r\n            this.categoriesConfig = {\r\n                categories: {},\r\n                defaultCategory: 'General'\r\n            };\r\n            console.log('Using fallback configuration with empty categories');\r\n        }\r\n    }\r\n\r\n    async refresh(): Promise<void> {\r\n        await this.loadFeeds();\r\n        this._onDidChangeTreeData.fire(undefined);\r\n    }\r\n\r\n    getTreeItem(element: any): vscode.TreeItem {\r\n        if (element.posts) {\r\n            // Category node\r\n            const item = new vscode.TreeItem(element.label, vscode.TreeItemCollapsibleState.Expanded);\r\n            item.tooltip = `${element.posts.length} posts`;\r\n            item.contextValue = 'category';\r\n            return item;\r\n        } else {\r\n            // Blog post node\r\n            const item = new vscode.TreeItem(element.title, vscode.TreeItemCollapsibleState.None);\r\n            item.tooltip = element.description;\r\n            item.description = element.source;\r\n            item.command = {\r\n                command: 'rssBlogCategorizer.openPost',\r\n                title: 'Open Post',\r\n                arguments: [element]\r\n            };\r\n            item.contextValue = 'post';\r\n            return item;\r\n        }\r\n    }\r\n\r\n    getChildren(element?: any): Thenable<any[]> {\r\n        if (!element) {\r\n            // Return categories\r\n            const categoryNodes: CategoryNode[] = [];\r\n            this.categories.forEach((posts, category) => {\r\n                categoryNodes.push({\r\n                    label: `${category} (${posts.length})`,\r\n                    posts: posts,\r\n                    collapsibleState: vscode.TreeItemCollapsibleState.Expanded\r\n                });\r\n            });\r\n            return Promise.resolve(categoryNodes);\r\n        } else if (element.posts) {\r\n            // Return posts in category\r\n            return Promise.resolve(element.posts);\r\n        }\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getAllPosts(): Promise<BlogPost[]> {\r\n        return this.posts;\r\n    }\r\n\r\n    async setFeedUrl(feedUrl: string): Promise<void> {\r\n        // Validate URL before saving\r\n        try {\r\n            new URL(feedUrl);\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n        \r\n        const config = vscode.workspace.getConfiguration('rssBlogCategorizer');\r\n        await config.update('feedUrl', feedUrl, vscode.ConfigurationTarget.Global);\r\n        // Refresh will be called by the command handler\r\n    }\r\n\r\n    private async loadFeeds(): Promise<void> {\r\n        // Load categories configuration if not already loaded\r\n        if (!this.categoriesConfig) {\r\n            await this.loadCategoriesConfig();\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('rssBlogCategorizer');\r\n        const feedUrl = config.get<string>('feedUrl') || 'https://alvinashcraft.newsblur.com/social/rss/109116/alvinashcraft';\r\n        const recordCount = config.get<number>('recordCount') || 100;\r\n        \r\n        console.log(`Loading feeds - clearing existing ${this.posts.length} posts`);\r\n        this.posts = [];\r\n        this.categories.clear();\r\n\r\n        try {\r\n            // Append record count parameter to URL\r\n            const urlWithParams = this.appendRecordCount(feedUrl, recordCount);\r\n            const posts = await this.fetchFeed(urlWithParams);\r\n            console.log(`Fetched ${posts.length} posts from feed`);\r\n            const filteredPosts = await this.filterPostsByDate(posts);\r\n            console.log(`Filtered to ${filteredPosts.length} posts after date filtering`);\r\n            this.posts.push(...filteredPosts);\r\n            console.log(`Total posts after loading: ${this.posts.length}`);\r\n        } catch (error) {\r\n            console.error('Error loading feed:', error);\r\n        }\r\n\r\n        this.categorizePosts();\r\n    }\r\n\r\n    private async fetchFeed(feedUrl: string): Promise<BlogPost[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const options = {\r\n                headers: {\r\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n                }\r\n            };\r\n\r\n            https.get(feedUrl, options, (response) => {\r\n                // Handle redirects\r\n                if (response.statusCode && response.statusCode >= 300 && response.statusCode < 400 && response.headers.location) {\r\n                    return this.fetchFeed(response.headers.location).then(resolve).catch(() => resolve([]));\r\n                }\r\n\r\n                // Check for successful response\r\n                if (!response.statusCode || response.statusCode < 200 || response.statusCode >= 300) {\r\n                    console.error(`Error fetching RSS feed ${feedUrl}: HTTP ${response.statusCode}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n\r\n                let data = '';\r\n                \r\n                response.on('data', (chunk) => {\r\n                    data += chunk;\r\n                });\r\n\r\n                response.on('end', () => {\r\n                    try {\r\n                        const parser = new XMLParser({\r\n                            ignoreAttributes: false,\r\n                            attributeNamePrefix: '@_'\r\n                        });\r\n                        \r\n                        const result = parser.parse(data);\r\n                        const posts = this.parseRSSFeed(result, feedUrl);\r\n                        resolve(posts);\r\n                    } catch (error) {\r\n                        console.error(`Error parsing RSS feed ${feedUrl}:`, error);\r\n                        resolve([]);\r\n                    }\r\n                });\r\n            }).on('error', (error) => {\r\n                console.error(`Error fetching RSS feed ${feedUrl}:`, error);\r\n                resolve([]);\r\n            });\r\n        });\r\n    }\r\n\r\n    private parseRSSFeed(rssData: any, feedUrl: string): BlogPost[] {\r\n        const posts: BlogPost[] = [];\r\n        const seenLinks = new Set<string>(); // Track duplicate links\r\n        \r\n        try {\r\n            // Handle both RSS and Atom feeds\r\n            const channel = rssData.rss?.channel || rssData.feed;\r\n            if (!channel) {\r\n                console.warn('No RSS channel or Atom feed found in data');\r\n                return posts;\r\n            }\r\n\r\n            const items = Array.isArray(channel.item) ? channel.item : \r\n                         channel.item ? [channel.item] : \r\n                         Array.isArray(channel.entry) ? channel.entry : \r\n                         channel.entry ? [channel.entry] : [];\r\n\r\n            if (items.length === 0) {\r\n                console.warn('No items/entries found in feed');\r\n                return posts;\r\n            }\r\n\r\n            const feedTitle = channel.title || new URL(feedUrl).hostname;\r\n            console.log(`Processing ${items.length} items from feed: ${feedTitle}`);\r\n\r\n            items.forEach((item: any, index: number) => {\r\n                let link = '';\r\n                \r\n                // Handle different link formats (RSS vs Atom)\r\n                if (typeof item.link === 'string') {\r\n                    link = item.link;\r\n                } else if (item.link?.['@_href']) {\r\n                    link = item.link['@_href'];\r\n                } else if (Array.isArray(item.link)) {\r\n                    // Atom feeds can have multiple links - prefer alternate\r\n                    const alternateLink = item.link.find((l: any) => l['@_rel'] === 'alternate');\r\n                    link = alternateLink?.['@_href'] || item.link[0]?.['@_href'] || '';\r\n                } else if (item.link?.href) {\r\n                    link = item.link.href;\r\n                }\r\n\r\n                try {\r\n                    // Handle description/content that might be objects (Atom feeds)\r\n                    let description = '';\r\n                    if (item.description) {\r\n                        description = typeof item.description === 'string' ? item.description : \r\n                                    item.description['#text'] || item.description._ || '';\r\n                    } else if (item.summary) {\r\n                        description = typeof item.summary === 'string' ? item.summary : \r\n                                    item.summary['#text'] || item.summary._ || '';\r\n                    } else if (item.content) {\r\n                        description = typeof item.content === 'string' ? item.content : \r\n                                    item.content['#text'] || item.content._ || '';\r\n                    }\r\n                    \r\n                    // Handle title that might be an object\r\n                    let title = '';\r\n                    if (item.title) {\r\n                        title = typeof item.title === 'string' ? item.title : \r\n                               item.title['#text'] || item.title._ || String(item.title) || 'Untitled';\r\n                    } else {\r\n                        title = 'Untitled';\r\n                    }\r\n                    \r\n                    // Handle author that might be in different formats\r\n                    let author = '';\r\n                    try {\r\n                        if (item.author) {\r\n                            if (typeof item.author === 'string') {\r\n                                author = item.author;\r\n                            } else if (item.author.name) {\r\n                                author = typeof item.author.name === 'string' ? item.author.name : '';\r\n                            } else if (item.author['#text']) {\r\n                                author = typeof item.author['#text'] === 'string' ? item.author['#text'] : '';\r\n                            }\r\n                        } else if (item['dc:creator']) {\r\n                            author = typeof item['dc:creator'] === 'string' ? item['dc:creator'] : '';\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(`Error parsing author for post \"${title}\":`, error);\r\n                        author = '';\r\n                    }\r\n                    \r\n                    // Clean up and validate author\r\n                    author = author ? author.trim() : '';\r\n                    \r\n                    // Check for problematic values and default to \"unknown\"\r\n                    if (!author || \r\n                        author === '' || \r\n                        author.toLowerCase().includes('blurblog') ||\r\n                        author.includes('[object Object]') ||\r\n                        author === feedTitle ||\r\n                        author.length > 100) { // Sanity check for overly long author names\r\n                        author = 'unknown';\r\n                    }\r\n                    \r\n                    const post: BlogPost = {\r\n                        title: title,\r\n                        link: link,\r\n                        description: this.stripHtml(description),\r\n                        pubDate: item.pubDate || item.published || item.updated || '',\r\n                        category: this.categorizePost(title, description),\r\n                        source: feedTitle,\r\n                        author: author\r\n                    };\r\n                    \r\n                    if (post.title && post.link) {\r\n                        // Check for duplicate links\r\n                        if (seenLinks.has(post.link)) {\r\n                            console.log(`Duplicate link found, skipping: ${post.link}`);\r\n                        } else {\r\n                            seenLinks.add(post.link);\r\n                            posts.push(post);\r\n                        }\r\n                    }\r\n                } catch (itemError) {\r\n                    console.error(`Error processing feed item ${index}:`, itemError);\r\n                    console.error('Problematic item data:', JSON.stringify(item, null, 2));\r\n                    // Continue with next item instead of failing completely\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Error parsing RSS data:', error);\r\n        }\r\n\r\n        return posts;\r\n    }\r\n\r\n    private categorizePost(title: string, description: string): string {\r\n        // Only search the title for better categorization accuracy\r\n        // Description content can contain misleading keywords not related to the main topic\r\n        const titleContent = title.toLowerCase();\r\n        \r\n        // Use loaded categories configuration\r\n        if (!this.categoriesConfig) {\r\n            console.warn('❌ Categories configuration not loaded, using default category \"General\"');\r\n            return 'General';\r\n        }\r\n\r\n        // Check if categories are actually loaded\r\n        if (Object.keys(this.categoriesConfig.categories).length === 0) {\r\n            console.warn('⚠️ No categories found in configuration, using default category \"General\"');\r\n            return this.categoriesConfig.defaultCategory;\r\n        }\r\n\r\n        // Iterate through categories in the order they appear in the JSON file\r\n        // The first matching category wins - no further categories are checked\r\n        for (const [category, keywords] of Object.entries(this.categoriesConfig.categories)) {\r\n            // Ensure case-insensitive matching by converting both title and keywords to lowercase\r\n            const matchedKeyword = keywords.find(keyword => titleContent.includes(keyword.toLowerCase()));\r\n            if (matchedKeyword) {\r\n                // Log the categorization for debugging\r\n                console.log(`Post \"${title}\" categorized as \"${category}\" due to title keyword: \"${matchedKeyword}\" (case-insensitive match)`);\r\n                return category; // Immediate return - no further categories checked\r\n            }\r\n        }\r\n\r\n        // No category matched, use the default\r\n        console.log(`Post \"${title}\" categorized as default: \"${this.categoriesConfig.defaultCategory}\" (no title keywords matched)`);\r\n        return this.categoriesConfig.defaultCategory;\r\n    }\r\n\r\n    private categorizePosts(): void {\r\n        this.categories.clear();\r\n        \r\n        this.posts.forEach(post => {\r\n            const category = post.category;\r\n            if (!this.categories.has(category)) {\r\n                this.categories.set(category, []);\r\n            }\r\n            this.categories.get(category)!.push(post);\r\n        });\r\n\r\n        // Sort posts in each category by date (newest first)\r\n        this.categories.forEach(posts => {\r\n            posts.sort((a, b) => new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime());\r\n        });\r\n    }\r\n\r\n    private appendRecordCount(feedUrl: string, recordCount: number): string {\r\n        const url = new URL(feedUrl);\r\n        url.searchParams.set('n', recordCount.toString());\r\n        return url.toString();\r\n    }\r\n\r\n    private async filterPostsByDate(posts: BlogPost[]): Promise<BlogPost[]> {\r\n        const config = vscode.workspace.getConfiguration('rssBlogCategorizer');\r\n        const minimumDateTimeStr = config.get<string>('minimumDateTime') || '';\r\n        \r\n        let minimumDateTime: Date;\r\n        \r\n        if (minimumDateTimeStr.trim() === '') {\r\n            // Try to use the date of the latest \"Dew Drop\" post from Alvin's blog\r\n            const lastDewDropDate = await this.getLastDewDropDate();\r\n            \r\n            if (lastDewDropDate) {\r\n                minimumDateTime = lastDewDropDate;\r\n                console.log(`Using latest Dew Drop post date as filter: posts newer than ${minimumDateTime.toISOString()}`);\r\n            } else {\r\n                // Fallback to last 24 hours in UTC if we can't get the Dew Drop date\r\n                minimumDateTime = new Date();\r\n                minimumDateTime.setUTCHours(minimumDateTime.getUTCHours() - 24);\r\n                console.log(`Could not fetch Dew Drop date, using default UTC filter: posts newer than ${minimumDateTime.toISOString()}`);\r\n            }\r\n        } else {\r\n            try {\r\n                minimumDateTime = new Date(minimumDateTimeStr);\r\n                if (isNaN(minimumDateTime.getTime())) {\r\n                    // Invalid date, fall back to 24 hours UTC\r\n                    minimumDateTime = new Date();\r\n                    minimumDateTime.setUTCHours(minimumDateTime.getUTCHours() - 24);\r\n                    console.warn(`Invalid minimumDateTime format: \"${minimumDateTimeStr}\". Using default UTC filter: ${minimumDateTime.toISOString()}`);\r\n                } else {\r\n                    console.log(`Using custom UTC filter: posts newer than ${minimumDateTime.toISOString()}`);\r\n                }\r\n            } catch (error) {\r\n                // Invalid date, fall back to 24 hours UTC\r\n                minimumDateTime = new Date();\r\n                minimumDateTime.setUTCHours(minimumDateTime.getUTCHours() - 24);\r\n                console.warn(`Error parsing minimumDateTime: \"${minimumDateTimeStr}\". Using default UTC filter: ${minimumDateTime.toISOString()}`);\r\n            }\r\n        }\r\n\r\n        const filteredPosts = posts.filter(post => {\r\n            if (!post.pubDate) {\r\n                console.log(`Excluding post \"${post.title}\" - no publication date`);\r\n                return false; // Exclude posts without dates\r\n            }\r\n            \r\n            try {\r\n                const postDate = new Date(post.pubDate);\r\n                if (isNaN(postDate.getTime())) {\r\n                    console.log(`Excluding post \"${post.title}\" - invalid date format: \"${post.pubDate}\"`);\r\n                    return false; // Exclude posts with invalid dates\r\n                }\r\n                \r\n                const isIncluded = postDate >= minimumDateTime;\r\n                if (!isIncluded) {\r\n                    console.log(`Excluding post \"${post.title}\" - too old: ${postDate.toISOString()} < ${minimumDateTime.toISOString()}`);\r\n                }\r\n                return isIncluded;\r\n            } catch (error) {\r\n                console.log(`Excluding post \"${post.title}\" - date parsing error: ${error}`);\r\n                return false; // Exclude posts with invalid dates\r\n            }\r\n        });\r\n\r\n        console.log(`Date filtering: ${filteredPosts.length} of ${posts.length} posts passed the UTC date filter`);\r\n        return filteredPosts;\r\n    }\r\n\r\n    private stripHtml(html: any): string {\r\n        // Handle non-string inputs defensively\r\n        if (!html) {\r\n            return '';\r\n        }\r\n        \r\n        // Convert to string if it's not already\r\n        let htmlStr = '';\r\n        if (typeof html === 'string') {\r\n            htmlStr = html;\r\n        } else if (typeof html === 'object') {\r\n            // Handle XML parser objects that might have text content\r\n            htmlStr = html['#text'] || html._ || html.toString() || '';\r\n        } else {\r\n            htmlStr = String(html);\r\n        }\r\n        \r\n        if (!htmlStr) {\r\n            return '';\r\n        }\r\n        \r\n        try {\r\n            // First decode HTML entities\r\n            const decoded = htmlStr\r\n                .replace(/&lt;/g, '<')\r\n                .replace(/&gt;/g, '>')\r\n                .replace(/&amp;/g, '&')\r\n                .replace(/&quot;/g, '\"')\r\n                .replace(/&#39;/g, \"'\")\r\n                .replace(/&nbsp;/g, ' ');\r\n            \r\n            // Remove HTML tags more robustly\r\n            const withoutTags = decoded\r\n                .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '') // Remove script tags and content\r\n                .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '')   // Remove style tags and content\r\n                .replace(/<[^>]*>/g, '')                          // Remove all other HTML tags\r\n                .replace(/\\s+/g, ' ')                             // Normalize whitespace\r\n                .trim();\r\n            \r\n            return withoutTags.substring(0, 200);\r\n        } catch (error) {\r\n            console.error('Error stripping HTML:', error, 'Input was:', html);\r\n            return htmlStr.substring(0, 200);\r\n        }\r\n    }\r\n}","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","module.exports = require(\"fs\");","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","module.exports = require(\"path\");","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n\nmodule.exports = toNumber;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\r\nimport { RSSBlogProvider } from './rssProvider';\r\nimport { ExportManager } from './exportManager';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log('RSS Blog Categorizer extension is now active!');\r\n\r\n    const provider = new RSSBlogProvider(context);\r\n    \r\n    // Register tree data provider\r\n    const treeView = vscode.window.createTreeView('rssBlogCategorizerView', {\r\n        treeDataProvider: provider,\r\n        showCollapseAll: true\r\n    });\r\n\r\n    const exportManager = new ExportManager();\r\n\r\n    // Register commands\r\n    const refreshCommand = vscode.commands.registerCommand('rssBlogCategorizer.refresh', async () => {\r\n        await provider.refresh();\r\n    });\r\n\r\n    const exportMarkdownCommand = vscode.commands.registerCommand('rssBlogCategorizer.exportMarkdown', async () => {\r\n        const posts = await provider.getAllPosts();\r\n        await exportManager.exportAsMarkdown(posts);\r\n    });\r\n\r\n    const exportHtmlCommand = vscode.commands.registerCommand('rssBlogCategorizer.exportHtml', async () => {\r\n        const posts = await provider.getAllPosts();\r\n        await exportManager.exportAsHtml(posts);\r\n    });\r\n\r\n    const openPostCommand = vscode.commands.registerCommand('rssBlogCategorizer.openPost', (post: any) => {\r\n        if (post && post.link) {\r\n            vscode.env.openExternal(vscode.Uri.parse(post.link));\r\n        }\r\n    });\r\n\r\n    const setFeedCommand = vscode.commands.registerCommand('rssBlogCategorizer.addFeed', async () => {\r\n        const config = vscode.workspace.getConfiguration('rssBlogCategorizer');\r\n        const currentFeedUrl = config.get<string>('feedUrl') || 'https://dev.to/feed';\r\n        \r\n        const feedUrl = await vscode.window.showInputBox({\r\n            prompt: 'Set RSS feed URL',\r\n            placeHolder: 'https://example.com/feed.xml',\r\n            value: currentFeedUrl\r\n        });\r\n        \r\n        if (feedUrl && feedUrl !== currentFeedUrl) {\r\n            try {\r\n                await provider.setFeedUrl(feedUrl);\r\n                await provider.refresh();\r\n                vscode.window.showInformationMessage(`RSS feed updated to: ${feedUrl}`);\r\n            } catch (error) {\r\n                vscode.window.showErrorMessage(`Invalid URL format: ${feedUrl}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Auto-refresh based on configuration\r\n    const getRefreshInterval = () => {\r\n        const config = vscode.workspace.getConfiguration('rssBlogCategorizer');\r\n        return (config.get<number>('refreshInterval') || 30) * 60 * 1000;\r\n    };\r\n\r\n    let refreshInterval = setInterval(async () => {\r\n        await provider.refresh();\r\n    }, getRefreshInterval());\r\n\r\n    // Update interval when configuration changes\r\n    const configChangeHandler = vscode.workspace.onDidChangeConfiguration(event => {\r\n        if (event.affectsConfiguration('rssBlogCategorizer.refreshInterval')) {\r\n            clearInterval(refreshInterval);\r\n            refreshInterval = setInterval(async () => {\r\n                await provider.refresh();\r\n            }, getRefreshInterval());\r\n        }\r\n        \r\n        // Auto-refresh when feed settings change\r\n        if (event.affectsConfiguration('rssBlogCategorizer.feedUrl') ||\r\n            event.affectsConfiguration('rssBlogCategorizer.recordCount') ||\r\n            event.affectsConfiguration('rssBlogCategorizer.minimumDateTime')) {\r\n            provider.refresh().catch(console.error);\r\n        }\r\n    });\r\n\r\n    context.subscriptions.push(\r\n        refreshCommand,\r\n        exportMarkdownCommand,\r\n        exportHtmlCommand,\r\n        openPostCommand,\r\n        setFeedCommand,\r\n        treeView,\r\n        configChangeHandler,\r\n        { dispose: () => clearInterval(refreshInterval) }\r\n    );\r\n\r\n    // Initial refresh\r\n    provider.refresh().catch(console.error);\r\n}\r\n\r\nexport function deactivate() {}"],"names":["module","exports","ignoreAttributes","Array","isArray","attrName","pattern","RegExp","test","exportAsMarkdown","posts","content","this","generateMarkdownContent","saveExport","exportAsHtml","generateHtmlContent","generateDewDropTitle","console","log","nextPostNumber","getLatestDewDropNumber","today","Date","month","getMonth","title","getDate","getFullYear","vscode","window","showInformationMessage","error","fallbackTitle","showWarningMessage","rssData","fetchRssFeed","length","result","XMLParser","attributeNamePrefix","parseAttributeValue","trimValues","parse","items","rss","channel","item","i","Math","min","replace","match","toLowerCase","includes","postNumber","parseInt","warn","showErrorMessage","url","Promise","resolve","reject","request","https","get","timeout","headers","response","statusCode","Error","statusMessage","data","on","chunk","destroy","groupedPosts","groupPostsByCategory","Object","entries","forEach","category","categoryPosts","post","link","author","geekShelfMarkdown","generateGeekShelfMarkdown","dewDropTitle","htmlStart","escapeHtml","categoriesHtml","geekShelfHtml","generateGeekShelfHtml","categoriesConfig","loadCategoriesConfig","categoryOrder","keys","categories","grouped","seenLinks","Set","has","add","push","values","sort","a","b","pubDate","getTime","orderedResult","categoryName","categoriesPath","Uri","joinPath","extensions","getExtension","extensionUri","fsPath","path","join","__dirname","categoriesData","fs","readFileSync","JSON","format","extension","filename","defaultUri","workspace","workspaceFolders","uri","showSaveDialog","filters","toUpperCase","writeFile","Buffer","from","doc","openTextDocument","showTextDocument","book","getBookOfTheDay","imageUrl","productUrl","description","books","loadBooksConfig","bookIndex","floor","booksPath","booksData","text","nameStartChar","nameRegexp","regexName","isExist","v","isEmptyObject","obj","merge","target","arrayMode","len","getValue","isName","string","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","require","util","readEntityExp","xmlData","entityName","trim","indexOf","startChar","val","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","name","entities","angleBracketsCount","hasBody","comment","exp","regx","validator","XMLBuilder","XMLValidator","defaultOptions","preserveOrder","attributesGroupName","textNodeName","removeNSPrefix","allowBooleanAttributes","parseTagValue","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","tagName","attributeValueProcessor","stopNodes","alwaysCreateTextNode","commentPropName","unpairedTags","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","buildOptions","options","assign","compress","arr","compressedObj","tagObj","property","propName","newJpath","undefined","isLeaf","isLeafTag","assignAttributes","hasOwnProperty","key","attrMap","jpath","atrrName","propCount","prettify","node","xmlNode","readDocType","toNumber","getIgnoreAttributesFn","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","tagname","tags","split","prefix","charAt","attrsRegx","buildAttributesMap","attrStr","ignoreAttributesFn","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","substring","colonIndex","substr","saveTextToParentTag","lastTagName","lastIndexOf","propIndex","tagsNodeStack","pop","tagData","readTagExp","childNode","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","child","entity","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","closingChar","attrBoundary","ch","tagExpWithClosingIndex","separatorIndex","search","trimStart","openTagCount","shouldParse","constructor","_","String","fromCharCode","Number","context","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","Map","getLastDewDropDate","fetchFeed","dewDropPosts","filter","startsWith","slice","map","p","latestDewDrop","latestDate","isNaN","toISOString","extensionPath","promises","readFile","defaultCategory","refresh","loadFeeds","fire","getTreeItem","element","TreeItem","label","TreeItemCollapsibleState","Expanded","tooltip","contextValue","None","source","command","arguments","getChildren","categoryNodes","collapsibleState","getAllPosts","setFeedUrl","feedUrl","URL","config","getConfiguration","update","ConfigurationTarget","Global","recordCount","clear","urlWithParams","appendRecordCount","filteredPosts","filterPostsByDate","categorizePosts","location","then","catch","parseRSSFeed","feed","entry","feedTitle","hostname","alternateLink","find","l","href","summary","stripHtml","published","updated","categorizePost","itemError","stringify","titleContent","keywords","matchedKeyword","keyword","set","searchParams","toString","minimumDateTimeStr","minimumDateTime","lastDewDropDate","setUTCHours","getUTCHours","postDate","isIncluded","html","htmlStr","arrToStr","indentation","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","indentBy","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","attr","attrVal","suppressBooleanAttributes","textValue","jArray","buildFromOrderedJs","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","ajPath","j2x","concat","buildTextValNode","buildObjectNode","repeat","prototype","build","jObj","arrayNodeName","call","buildAttrPairStr","arrLen","listTagVal","listTagAttr","j","Ks","L","closeTag","tagEndExp","piClosingChar","isWhiteSpace","char","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","validate","tagFound","reachedRoot","err","tagStartPos","closingTag","validateTagName","msg","readAttributeStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","openPos","col","afterAmp","validateAmpersand","t","doubleQuote","singleQuote","validAttrStrRegxp","attrNames","getPositionFromMatch","validateAttrName","re","validateNumberAmpersand","count","message","lineNumber","lines","OrderedObjParser","validationOption","orderedObjParser","addEntity","hexRegex","numRegex","consider","decimalPoint","trimmedStr","skipLike","numStr","parse_int","notation","sign","numTrimmedByZeros","num","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","provider","RSSBlogProvider","treeView","createTreeView","treeDataProvider","showCollapseAll","exportManager","ExportManager","refreshCommand","commands","registerCommand","async","exportMarkdownCommand","exportHtmlCommand","openPostCommand","env","openExternal","setFeedCommand","currentFeedUrl","showInputBox","prompt","placeHolder","getRefreshInterval","refreshInterval","setInterval","configChangeHandler","onDidChangeConfiguration","affectsConfiguration","clearInterval","subscriptions","dispose"],"sourceRoot":""}